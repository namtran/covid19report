{"version":3,"sources":["components/Cards/Cards.module.css","api/index.js","components/Cards/Cards.jsx","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","App.module.css","images/image.png","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","logo.svg"],"names":["module","exports","url","fetchData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","console","log","fetchCountries","countries","name","Cards","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","Chart","useState","setDailyData","useEffect","initialDailyData","fetchMyAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","length","borderColor","fill","Countries","handleCountryChange","setCountries","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","setState","dataCard","state","this","image","src","alt","CountryPicker","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a7120262.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import axios from 'axios';\nconst url = 'https://covid19.mathdro.id/api';\n\n\n\nexport const fetchData = async (country) => {\n    let changeableUrl = url;\n  \n    if (country) {\n      changeableUrl = `${url}/countries/${country}`;\n    }\n  \n    try {\n      const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\n  \n      return { confirmed, recovered, deaths, lastUpdate };\n    } catch (error) {\n      return error;\n    }\n  };\n\n\nexport const fetchDailyData = async () => {\n    try{\n        const { data } = await axios.get(`${url}/daily`);\n        //console.log(data);\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate\n        }));\n        //const initialDailyData = Object.assign([], modifiedData);\n        return modifiedData;\n       //return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\n        \n    }catch(error){\n        console.log(error);\n        \n    }\n    \n};\n\nexport const fetchCountries = async () => {\n    try {\n      const { data: { countries } } = await axios.get(`${url}/countries`);\n  \n      return countries.map((country) => country.name);\n    } catch (error) {\n      console.log(error);\n    }\n  };","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nimport styles from './Cards.module.css';\n\nconst Cards = ( { data: { confirmed, recovered, deaths, lastUpdate } } ) => {\n    //console.log(props);\n    if( !confirmed) {\n        return \"Loading...\";\n    }\n    return (\n        <div className={ styles.container }> \n        <Grid container spacing={3} justify =\"center\">\n            <Grid item component ={Card} xs={12} md={3} className={cx(styles.card, styles.infected)} >\n                <CardContent>\n                    <Typography color = \"textSecondary\" gutterBottom>Infected</Typography>\n                    <Typography variant = \"h5\">\n                        <CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\"/>\n                    </Typography>\n                    <Typography color = \"textSecondary\" gutterBottom>{ new Date(lastUpdate).toDateString() }</Typography>\n                    <Typography variant = \"body2\">Number of active cases of COVID-19</Typography>\n                </CardContent>\n            </Grid>\n        \n        \n            <Grid item component ={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)} >\n                <CardContent>\n                    <Typography color = \"textSecondary\" gutterBottom>Recovered</Typography>\n                    <Typography variant = \"h5\">\n                        <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\"/>\n                    </Typography>\n                    <Typography color = \"textSecondary\" gutterBottom>{ new Date(lastUpdate).toDateString() }</Typography>\n                    <Typography variant = \"body2\">Number of recovered from of COVID-19</Typography>\n                </CardContent>\n            </Grid>\n        \n        \n            <Grid item component ={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)} >\n                <CardContent>\n                    <Typography color = \"textSecondary\" gutterBottom>Deaths</Typography>\n                    <Typography variant = \"h5\">\n                        <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\"/>\n                    </Typography>\n                    <Typography color = \"textSecondary\" gutterBottom>{ new Date(lastUpdate).toDateString() }</Typography>\n                    <Typography variant = \"body2\">Number of deaths caused by COVID-19</Typography>\n                </CardContent>\n            </Grid>\n        </Grid>\n\n        </div>\n        \n        \n    );\n}\n\nexport default Cards;\n","import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport {Line, Bar} from 'react-chartjs-2';\n\nimport styles from './Chart.module.css';\n\n\n//this Chart class use barchart props and country prop of data sctruct which passed from App class\n//for line chart, data is from itself fetch from web\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n    const [dailyData, setDailyData] = useState({});\n  \n    useEffect(() => {\n      const fetchMyAPI = async () => {\n        const initialDailyData = await fetchDailyData();\n  \n        setDailyData(initialDailyData);\n      };\n  \n      fetchMyAPI();\n    }, []);\n\n\n     \n    \n        // const initialValue = [\n        //     { confirmed: 0, deaths: 0, date: '' }];\n        // const allowedState = [\n        //     { confirmed: 0, deaths: 0, date: '' },\n        //     { confirmed: 0, deaths: 0, date: '' },\n        //     { confirmed: 0, deaths: 0, date: '' }\n        //     ];\n        //const { dataChart: dataChart, dataBarChart: dataBarChart, country: country } = this.state;   \n        //console.log('conutry='+country); \n\n        //console.log(dataChart);\n\n        const barChart = (\n            confirmed ? (\n              <Bar\n                data={{\n                  labels: ['Infected', 'Recovered', 'Deaths'],\n                  datasets: [\n                    {\n                      label: 'People',\n                      backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n                      data: [confirmed.value, recovered.value, deaths.value],\n                    },\n                  ],\n                }}\n                options={{\n                  legend: { display: false },\n                  title: { display: true, text: `Current state in ${country}` },\n                }}\n              />\n            ) : null\n          );\n\n        const lineChart = (\n            \n            \n            dailyData.length\n            ? (\n            \n                <Line \n                    data = {{\n                        labels: dailyData.map(({date}) => date),\n                        datasets: [{\n                            data: dailyData.map(({confirmed}) => confirmed),\n                            label: 'Infected',\n                            borderColor: '#3333ff',\n                            fill:true\n                        }, {\n                            data: dailyData.map(({deaths}) => deaths),\n                            label: 'Deaths',\n                            borderColor: 'red',\n                            backgroundColor: 'rgba(255,0,0,0.5)',\n                            fill:true\n                        }],\n                    }}\n                />\n                ) : null\n            \n        );\n        return (\n            <div className={styles.container}>\n                {country ? barChart : lineChart}\n                </div>\n        );\n    \n}\n\n\nexport default Chart;\n","import React, { useState, useEffect } from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\nimport { fetchCountries } from '../../api';\n\nimport styles from './CountryPicker.module.css';\n\nconst Countries = ({ handleCountryChange }) => {\n  const [countries, setCountries] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setCountries(await fetchCountries());\n    };\n\n    fetchAPI();\n  }, []);\n\n  return (\n    <FormControl className={styles.formControl}>\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n        <option value=\"\">Global</option>\n        {countries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n      </NativeSelect>\n    </FormControl>\n  );\n};\n\n\n\nexport default Countries;\n","import React from 'react';\nimport logo from './logo.svg';\n//import './App.css';\nimport styles from './App.module.css';\n\nimport { fetchData } from './api';\nimport image from './images/image.png';\n\n  // import Cards from './components/Cards';\n  // import Chart from './components/Chart';\n  // import CountryPicker from './components/CountryPicker';\nimport { Cards, Chart, CountryPicker } from './components';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      dataCard: {},\n      country: '',\n    }\n  }\n\n  async componentDidMount() {\n    const dataCard = await fetchData();\n    console.log(dataCard);\n\n    this.setState({ dataCard: dataCard });\n  }\n\n  handleCountryChange = async (country) => {\n    console.log('handleCountryChange'+country);\n    const data = await fetchData(country);\n\n    this.setState({ dataCard: data, country: country });\n  }\n\n  render() {\n    const { dataCard: dataCard, country: country } = this.state;\n    return (\n      <div className={styles.container}> \n         <img className={styles.image} src={image} alt=\"COVID-19\" />\n\n        <Cards data={ dataCard }/>\n        <CountryPicker handleCountryChange={this.handleCountryChange}/>\n        <Chart data={dataCard} country={country}/>\n        \n      </div>\n    );\n\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}